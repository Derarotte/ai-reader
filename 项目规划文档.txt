# Go桌面阅读器应用开发规划

## 项目概述
开发一个基于Go的桌面阅读器应用，支持内容选取和AI背景分析功能。

## 1. 项目需求与用户场景分析

### 核心用户需求
- 主要用户群体: 研究人员、学生、知识工作者
- 使用场景: 
  - 阅读学术论文时遇到专业术语需要背景解释
  - 阅读外文资料时需要文化背景分析
  - 学习新领域知识时需要概念扩展
  - 快速理解复杂文档的关键信息

### 核心价值主张
- 智能化阅读: 不仅是显示文本，更要理解和分析内容
- 上下文感知: AI分析要结合文档整体上下文
- 效率提升: 减少在多个工具间切换的时间成本

## 2. 整体架构与技术选型

### 技术栈对比分析

GUI框架选择:
- Fyne ✅: 
  - 优势：Go原生、跨平台、现代设计、性能好
  - 劣势：相对新，生态不够丰富
- Walk: 仅Windows、较老旧
- Electron + Go backend: 资源占用大，但UI灵活性高

文档解析:
- TXT/MD: 内置支持
- PDF: github.com/ledongthuc/pdf 或 github.com/pdfcpu/pdfcpu
- DOC/DOCX: github.com/nguyenthenguyen/docx

AI服务选择:
- OpenAI GPT-4 ✅: 理解能力强，中文支持好
- Claude API: 长文本处理好，但国内访问限制
- 本地模型: Ollama + 本地LLM，但需要更多资源

### 架构设计

┌─────────────────────────────────────┐
│           Presentation Layer        │
│  ┌─────────┬──────────┬─────────────┐│
│  │File Tree│  Reader  │  AI Panel   ││
│  │         │  Area    │             ││
│  └─────────┴──────────┴─────────────┘│
└─────────────────────────────────────┘
┌─────────────────────────────────────┐
│            Business Layer           │
│  ┌──────────┬────────────────────────┐│
│  │ Document │     AI Service         ││
│  │ Manager  │     Manager            ││
│  └──────────┴────────────────────────┘│
└─────────────────────────────────────┘
┌─────────────────────────────────────┐
│             Data Layer              │
│  ┌──────────┬─────────────┬─────────┐│
│  │File I/O  │Config Store │AI Cache ││
│  └──────────┴─────────────┴─────────┘│
└─────────────────────────────────────┘

## 3. 功能模块与交互流程规划

### 核心功能模块

1. 文档管理模块
- 文件浏览器：支持文件夹导航
- 格式支持：TXT、MD、PDF、DOCX
- 书签系统：快速跳转重要段落
- 阅读历史：记录阅读进度

2. 阅读器核心模块
- 文本渲染：支持富文本显示、代码高亮
- 导航功能：目录、搜索、跳转
- 显示设置：字体、大小、主题、行距
- 选择交互：鼠标/键盘选择、多选支持

3. AI分析模块
- 内容分析：概念解释、背景分析、关联推荐
- 上下文理解：结合整个文档的语境
- 分析历史：保存之前的分析结果
- 自定义提示：用户可定制分析角度

### 用户交互流程

主要工作流程:
1. 打开文档 → 2. 浏览阅读 → 3. 选择文本 → 4. 触发AI分析 → 5. 查看结果 → 6. 继续阅读

详细交互设计:
- 选择触发: 鼠标选择后右键菜单 / 快捷键 / 自动触发
- 分析类型: 背景分析、概念解释、深度扩展、翻译等
- 结果展示: 侧边栏弹出 / 悬浮窗 / 新标签页
- 结果操作: 复制、保存、分享、继续分析

### 界面布局详设

左侧面板 (25%):
- 文件树
- 书签列表
- 分析历史

中央阅读区 (50%):
- 文档内容显示
- 选择高亮
- 滚动导航

右侧AI面板 (25%):
- 分析结果
- 操作按钮
- 设置选项

## 4. 开发里程碑与时间规划

### 开发阶段规划

阶段1: 基础框架搭建 (1-2周)
- 项目初始化和依赖管理
- Fyne GUI基础界面搭建
- 基本的三栏布局实现
- 简单的文件选择和显示

阶段2: 文档阅读器实现 (2-3周)
- 多格式文档解析 (TXT, MD, PDF)
- 文档内容渲染和显示优化
- 基本导航功能 (滚动、搜索、目录)
- 文件管理和历史记录

阶段3: 文本选择与交互 (1-2周)
- 文本选择功能实现
- 右键菜单和快捷键支持
- 选择区域高亮显示
- 用户交互体验优化

阶段4: AI服务集成 (2-3周)
- AI API接口封装
- 请求管理和错误处理
- 上下文构建和prompt优化
- 响应解析和格式化

阶段5: AI分析面板 (2周)
- 分析结果展示界面
- 分析历史管理
- 结果操作功能 (复制、保存等)
- 设置和配置选项

阶段6: 优化与测试 (1-2周)
- 性能优化和内存管理
- 用户体验细节调优
- 错误处理和异常情况
- 打包和分发准备

总时间估算: 9-14周

## 5. 技术难点评估与解决方案

### 主要技术挑战

1. 文本选择在GUI中的实现复杂性
- 难点: Fyne中文本选择不如Web那么直观
- 解决方案: 
  - 使用RichText widget结合自定义选择逻辑
  - 实现选择状态管理和视觉反馈
  - 考虑使用Canvas进行底层绘制控制

2. 不同文档格式的统一处理
- 难点: PDF、DOC、MD格式差异大，布局复杂
- 解决方案:
  - 创建统一的Document接口
  - 各格式实现独立的解析器
  - 转换为通用的文本+元数据结构

3. AI服务的成本和响应时间控制
- 难点: 频繁调用AI API成本高，响应慢影响体验
- 解决方案:
  - 智能缓存机制，避免重复分析
  - 文本预处理，只发送关键内容
  - 异步处理，避免界面卡顿
  - 提供本地模型选项

4. 大文档的内存管理
- 难点: 大型PDF或长文档可能导致内存溢出
- 解决方案:
  - 分页加载机制
  - 文档内容懒加载
  - 内存回收策略

5. 跨平台兼容性
- 难点: 不同系统的文件路径、字体渲染差异
- 解决方案:
  - 使用Go的filepath包处理路径
  - Fyne内置跨平台字体支持
  - 在主要平台进行测试

### 风险缓解策略

1. MVP优先: 先实现核心功能，逐步完善
2. 模块化设计: 各组件独立，降低耦合
3. 用户配置: 提供丰富的设置选项适应不同需求
4. 错误处理: 完善的异常处理和用户提示
5. 性能监控: 内置性能指标和调试选项

## 项目结构

ai-reader/
├── main.go                 # 应用入口
├── internal/
│   ├── app/               # 应用核心逻辑
│   ├── ui/                # 用户界面
│   ├── reader/            # 文档阅读器
│   ├── ai/               # AI服务集成
│   └── config/           # 配置管理
├── assets/               # 资源文件
└── go.mod               # Go模块定义

## 总结

该项目将创建一个功能完整的智能阅读器，结合传统文档阅读功能和现代AI分析能力，为用户提供更深入的阅读体验。通过合理的架构设计和分阶段开发，能够有效控制项目复杂度和开发风险。